from PyQt6.QtWidgets import *
from Final_Project_1_UI import *
import csv


class Logic(QMainWindow, Ui_DemographicInfo):
    """
        Main logic class for the Demographic Info program.

        Attributes:
        - ui: An instance of the UI class generated by PyQt6.
        - name: Name of the participant.
        - citizen: Citizenship status of the participant.
        - married: Marital status of the participant.
        - employed: Employment status of the participant.
        - party: Political party affiliation of the participant.
        - elect: Candidate elected by the participant.
        - votes: List to store participant votes.
        """

    def __init__(self):
        """
        Initializes the Logic class.
        """
        super().__init__()
        self.ui = Ui_DemographicInfo()
        self.name = 'none'
        self.citizen = 'none'
        self.married = 'none'
        self.employed = 'none'
        self.party = 'none'
        self.elect = 'none'
        self.votes = []
        self.ui.setupUi(self)
        self.ui.Clear_Button.clicked.connect(self.clear)
        self.ui.Next_Button.clicked.connect(self.next)
        self.ui.Finish_Poll_Button.clicked.connect(self.finish_poll)
        self.ui.Cast_Vote_Button.clicked.connect(self.cast_vote)
        self.ui.label_21.setVisible(False)
        self.ui.Error_Label.setVisible(False)
        # beginning of Candidates Page
        self.ui.Cast_Vote_Button.setVisible(False)
        self.ui.Candidates_Label.setVisible(False)
        self.ui.label_21.setVisible(False)
        self.ui.John_Candidate.setVisible(False)
        self.ui.John_Slogan.setVisible(False)
        self.ui.John_Party.setVisible(False)
        self.ui.label_4.setVisible(False)
        self.ui.label_6.setVisible(False)
        self.ui.label_5.setVisible(False)
        self.ui.John_Button.setVisible(False)
        self.ui.Jane_Button.setVisible(False)
        # End of Candidates page, beginning of Results
        self.ui.Candidates_Label_2.setVisible(False)
        self.ui.John_Results.setVisible(False)
        self.ui.John_Votes.setVisible(False)
        self.ui.John_Percent.setVisible(False)
        self.ui.John_Citizen.setVisible(False)
        self.ui.John_Married.setVisible(False)
        self.ui.John_Employed.setVisible(False)
        self.ui.John_voted_party.setVisible(False)
        self.ui.Jane_Results.setVisible(False)
        self.ui.Jane_Total.setVisible(False)
        self.ui.Jane_Percent.setVisible(False)
        self.ui.Jane_Citizen.setVisible(False)
        self.ui.Jane_Married.setVisible(False)
        self.ui.Jane_Employed.setVisible(False)
        self.ui.Jane_Voted_Party.setVisible(False)
        # End of Results

    def next(self):
        """
        Process participant information and move to the next stage.
        """
        print(f"NameBox text: {self.ui.NameBox.text()}")
        if self.ui.NameBox.text().replace(" ", "").isalpha():
            self.name = self.ui.NameBox.text().rstrip()
            print("here")
            if self.ui.Citizen_button.isChecked():
                self.citizen = 'Citizen'
            elif self.ui.NonCitizen_button.isChecked():
                self.citizen = 'Non-Citizen'
            else:
                self.citizen = 'No Reply'

            if self.ui.Married_button.isChecked():
                self.married = 'Married'
            elif self.ui.Widow_button.isChecked():
                self.married = 'Widow/Widower'
            elif self.ui.NonCitizen_button_2.isChecked():
                self.married = 'Single/Unmarried'
            else:
                self.married = 'No Reply'
            if self.ui.Employment_button.isChecked():
                self.employed = 'Employed'
            elif self.ui.Unemployed_button.isChecked():
                self.employed = 'Unemployed'
            else:
                self.employed = 'No Reply'
            if self.ui.Employment_button_2.isChecked():
                self.party = 'Pro-Pasta'
            elif self.ui.Unemployed_button_2.isChecked():
                self.party = 'Anti-Pasta'
            elif self.ui.Other_button.isChecked():
                self.party = 'Other'
            else:
                self.party = 'No Reply'
            self.ui.Candidates_Label.setVisible(True)
            self.ui.label_21.setVisible(False)
            self.ui.John_Candidate.setVisible(True)
            self.ui.John_Slogan.setVisible(True)
            self.ui.John_Party.setVisible(True)
            self.ui.label_4.setVisible(True)
            self.ui.label_6.setVisible(True)
            self.ui.label_5.setVisible(True)
            self.ui.John_Button.setVisible(True)
            self.ui.Jane_Button.setVisible(True)
            self.ui.Cast_Vote_Button.setVisible(True)
            # Demographic guys
            self.ui.Citizen_button.setVisible(False)
            self.ui.NonCitizen_button.setVisible(False)
            self.ui.NoReply_Citizen.setVisible(False)
            self.ui.NoReply_Married.setVisible(False)
            self.ui.NoReply_Employment.setVisible(False)
            self.ui.NoReply_Party.setVisible(False)
            self.ui.Married_button.setVisible(False)
            self.ui.Widow_button.setVisible(False)
            self.ui.NonCitizen_button_2.setVisible(False)
            self.ui.Employment_button.setVisible(False)
            self.ui.Unemployed_button.setVisible(False)
            self.ui.Employment_button_2.setVisible(False)
            self.ui.Unemployed_button_2.setVisible(False)
            self.ui.Employment_Label_2.setVisible(False)
            self.ui.NameBox.setVisible(False)
            self.ui.Citzenship_Label.setVisible(False)
            self.ui.Citzenship_Label_2.setVisible(False)
            self.ui.Employment_Label.setVisible(False)
            self.ui.Party_Label.setVisible(False)
            self.ui.Clear_Button.setVisible(False)
            self.ui.Finish_Poll_Button.setVisible(False)
            self.ui.Next_Button.setVisible(False)
            self.ui.Error_Label.setVisible(False)
            self.ui.Other_button.setVisible(False)
            # Demographic guys

        elif self.ui.NameBox.text() == '':
            self.ui.Error_Label.setText("Please enter your name")
            self.ui.Error_Label.setVisible(True)

        else:
            self.ui.Error_Label.setText("Name is letters only")
            self.ui.Error_Label.setVisible(True)

    def clear(self):
        """
        Clear participant input fields.
        """
        self.ui.NameBox.setText("")
        self.ui.NoReply_Citizen.setChecked(True)
        self.ui.NoReply_Married.setChecked(True)
        self.ui.NoReply_Employment.setChecked(True)
        self.ui.NoReply_Party.setChecked(True)
        self.ui.John_Button.setChecked(True)
        self.ui.Jane_Button.setChecked(True)
        self.ui.John_Button.setChecked(False)
        self.ui.Jane_Button.setChecked(False)
        self.ui.John_Button.setChecked(False)
        self.ui.Jane_Button.setChecked(False)

    def cast_vote(self):
        """
        Record the participant's vote.
        """
        if self.ui.John_Button.isChecked():
            self.elect = 'John'
            vote = [self.name, self.citizen, self.married, self.employed, self.party, self.elect]
            self.votes.append(vote)
            self.ui.Cast_Vote_Button.setVisible(False)
            self.ui.Candidates_Label.setVisible(False)
            self.ui.label_21.setVisible(False)
            self.ui.John_Candidate.setVisible(False)
            self.ui.John_Slogan.setVisible(False)
            self.ui.John_Party.setVisible(False)
            self.ui.label_4.setVisible(False)
            self.ui.label_6.setVisible(False)
            self.ui.label_5.setVisible(False)
            self.ui.John_Button.setVisible(False)
            self.ui.Jane_Button.setVisible(False)

            self.ui.Citizen_button.setVisible(True)
            self.ui.NonCitizen_button.setVisible(True)
            self.ui.NoReply_Citizen.setVisible(True)
            self.ui.NoReply_Married.setVisible(True)
            self.ui.NoReply_Employment.setVisible(True)
            self.ui.NoReply_Party.setVisible(True)
            self.ui.Married_button.setVisible(True)
            self.ui.Widow_button.setVisible(True)
            self.ui.NonCitizen_button_2.setVisible(True)
            self.ui.Employment_button.setVisible(True)
            self.ui.Unemployed_button.setVisible(True)
            self.ui.Employment_button_2.setVisible(True)
            self.ui.Unemployed_button_2.setVisible(True)
            self.ui.Employment_Label_2.setVisible(True)
            self.ui.NameBox.setVisible(True)
            self.ui.Citzenship_Label.setVisible(True)
            self.ui.Citzenship_Label_2.setVisible(True)
            self.ui.Employment_Label.setVisible(True)
            self.ui.Party_Label.setVisible(True)
            self.ui.Clear_Button.setVisible(True)
            self.ui.Finish_Poll_Button.setVisible(True)
            self.ui.Next_Button.setVisible(True)
            self.ui.Error_Label.setVisible(False)
            self.ui.Other_button.setVisible(True)
            self.ui.label_21.setVisible(False)
            self.clear()
        elif self.ui.Jane_Button.isChecked():
            self.elect = 'Jane'
            vote = [self.name, self.citizen, self.married, self.employed, self.party, self.elect]
            self.votes.append(vote)
            self.ui.Cast_Vote_Button.setVisible(False)
            self.ui.Candidates_Label.setVisible(False)
            self.ui.label_21.setVisible(False)
            self.ui.John_Candidate.setVisible(False)
            self.ui.John_Slogan.setVisible(False)
            self.ui.John_Party.setVisible(False)
            self.ui.label_4.setVisible(False)
            self.ui.label_6.setVisible(False)
            self.ui.label_5.setVisible(False)
            self.ui.John_Button.setVisible(False)
            self.ui.Jane_Button.setVisible(False)

            self.ui.Citizen_button.setVisible(True)
            self.ui.NonCitizen_button.setVisible(True)
            self.ui.NoReply_Citizen.setVisible(True)
            self.ui.NoReply_Married.setVisible(True)
            self.ui.NoReply_Employment.setVisible(True)
            self.ui.NoReply_Party.setVisible(True)
            self.ui.Married_button.setVisible(True)
            self.ui.Widow_button.setVisible(True)
            self.ui.NonCitizen_button_2.setVisible(True)
            self.ui.Employment_button.setVisible(True)
            self.ui.Unemployed_button.setVisible(True)
            self.ui.Employment_button_2.setVisible(True)
            self.ui.Unemployed_button_2.setVisible(True)
            self.ui.Employment_Label_2.setVisible(True)
            self.ui.NameBox.setVisible(True)
            self.ui.Citzenship_Label.setVisible(True)
            self.ui.Citzenship_Label_2.setVisible(True)
            self.ui.Employment_Label.setVisible(True)
            self.ui.Party_Label.setVisible(True)
            self.ui.Clear_Button.setVisible(True)
            self.ui.Finish_Poll_Button.setVisible(True)
            self.ui.Next_Button.setVisible(True)
            self.ui.Error_Label.setVisible(False)
            self.ui.Other_button.setVisible(True)
            self.ui.label_21.setVisible(False)
            self.clear()
        else:
            self.ui.label_21.setText("Select your Candidate!")
            self.ui.label_21.setVisible(True)
        self.ui.John_Button.setAutoExclusive(False)
        self.ui.John_Button.setChecked(False)
        self.ui.Jane_Button.setChecked(False)
        self.ui.John_Button.setAutoExclusive(True)

    def finish_poll(self):
        """
        Finish the poll, process votes, and display results.
        """
        with open('demographics.csv', 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            title_row = ['Name', 'Citizenship', 'Marital', 'Employment', 'Affiliation', 'Candidate']
            writer.writerow(title_row)

            writer.writerows(self.votes)

            john_list = [vote for vote in self.votes if vote[-1] == 'John']
            jane_list = [vote for vote in self.votes if vote[-1] == 'Jane']

            (john_citizen_type, john_citizen_count, john_married_type, john_married_count, john_employed_type,
             john_employed_count, john_party_type, john_party_count) = self.count(john_list)

            (jane_citizen_type, jane_citizen_count, jane_married_type, jane_married_count, jane_employed_type,
             jane_employed_count, jane_party_type, jane_party_count) = self.count(jane_list)

            john_votes = len(john_list)
            jane_votes = len(jane_list)

            total = john_votes + jane_votes
            self.ui.John_Votes.setText(f"Total: {john_votes}")
            self.ui.John_Percent.setText(f"Percent: {(john_votes/total)*100}%")
            self.ui.John_Employed.setText(f"Status: {john_employed_type} with {john_employed_count}")
            self.ui.John_Married.setText(f"Status: {john_married_type} with {john_married_count}")
            self.ui.John_Citizen.setText(f"Status: {john_citizen_type} with {john_citizen_count}")
            self.ui.John_voted_party.setText(f"Party: {john_party_type} with {john_party_count}")
            self.ui.Jane_Total.setText(f"Total: {jane_votes}")
            self.ui.Jane_Percent.setText(f"Percent: {(jane_votes / total)*100}%")
            self.ui.Jane_Employed.setText(f"Status: {jane_employed_type} with {jane_employed_count}")
            self.ui.Jane_Married.setText(f"Status: {jane_married_type} with {jane_married_count}")
            self.ui.Jane_Citizen.setText(f"Status: {jane_citizen_type} with {jane_citizen_count}")
            self.ui.Jane_Voted_Party.setText(f"Party: {jane_party_type} with {jane_party_count}")

            self.ui.Citizen_button.setVisible(False)
            self.ui.NonCitizen_button.setVisible(False)
            self.ui.NoReply_Citizen.setVisible(False)
            self.ui.NoReply_Married.setVisible(False)
            self.ui.NoReply_Employment.setVisible(False)
            self.ui.NoReply_Party.setVisible(False)
            self.ui.Married_button.setVisible(False)
            self.ui.Widow_button.setVisible(False)
            self.ui.NonCitizen_button_2.setVisible(False)
            self.ui.Employment_button.setVisible(False)
            self.ui.Unemployed_button.setVisible(False)
            self.ui.Employment_button_2.setVisible(False)
            self.ui.Unemployed_button_2.setVisible(False)
            self.ui.Employment_Label_2.setVisible(False)
            self.ui.NameBox.setVisible(False)
            self.ui.Citzenship_Label.setVisible(False)
            self.ui.Citzenship_Label_2.setVisible(False)
            self.ui.Employment_Label.setVisible(False)
            self.ui.Party_Label.setVisible(False)
            self.ui.Clear_Button.setVisible(False)
            self.ui.Finish_Poll_Button.setVisible(False)
            self.ui.Next_Button.setVisible(False)
            self.ui.Error_Label.setVisible(False)
            self.ui.Other_button.setVisible(False)

            self.ui.Candidates_Label_2.setVisible(True)
            self.ui.John_Results.setVisible(True)
            self.ui.John_Votes.setVisible(True)
            self.ui.John_Percent.setVisible(True)
            self.ui.John_Citizen.setVisible(True)
            self.ui.John_Married.setVisible(True)
            self.ui.John_Employed.setVisible(True)
            self.ui.John_voted_party.setVisible(True)
            self.ui.Jane_Results.setVisible(True)
            self.ui.Jane_Total.setVisible(True)
            self.ui.Jane_Percent.setVisible(True)
            self.ui.Jane_Citizen.setVisible(True)
            self.ui.Jane_Married.setVisible(True)
            self.ui.Jane_Employed.setVisible(True)
            self.ui.Jane_Voted_Party.setVisible(True)

    def count(self, list_1):
        """
        Analyzes a list of demographic information and counts the occurrences of various categories.

        Args:
            list_1 (list): A list containing demographic information, where each element is a sublist with the
                          structure [citizenship, marital status, employment status, party affiliation].

        Returns:
            tuple: A tuple containing counts and types for different categories, including:
                   - Citizenship type and count
                   - Marital status type and count
                   - Employment status type and count
                   - Party affiliation type and count

                   If the input list is empty, default values of 'none' and 0 are returned for each category.
        """
        if len(list_1) != 0:
            john_citizen_type, john_citizen_count = self.count_citizen(list_1)
            john_married_type, john_married_count = self.count_married(list_1)
            john_employed_type, john_employed_count = self.count_employed(list_1)
            john_party_type, john_party_count = self.count_party(list_1)
            return (john_citizen_type, john_citizen_count, john_married_type, john_married_count, john_employed_type,
                    john_employed_count, john_party_type, john_party_count)
        else:
            john_citizen_type = 'none'
            john_citizen_count = 0
            john_married_type = 'none'
            john_married_count = 0
            john_employed_type = 'none'
            john_employed_count = 0
            john_party_type = 'none'
            john_party_count = 0
            return (john_citizen_type, john_citizen_count, john_married_type, john_married_count, john_employed_type,
                    john_employed_count, john_party_type, john_party_count)

    def count_citizen(self, list_1):
        """
        Count the number of participants based on citizenship status.

        Args:
        - list_1: List of participant data.

        Returns:
        - Tuple containing citizenship type and count.
        """
        print(list_1[0][0])
        citizen_count = 0
        noncitizen_count = 0
        no_reply_count = 0
        for i in range(len(list_1)):
            print(i)
            if list_1[i][1] == "Citizen":
                citizen_count += 1
            elif list_1[i][1] == "Non-Citizen":
                noncitizen_count += 1
            else:
                no_reply_count += 1
        if citizen_count == max(citizen_count, noncitizen_count, no_reply_count):
            return "Citizen", citizen_count
        elif noncitizen_count == max(citizen_count, noncitizen_count, no_reply_count):
            return "Non-Citizen", noncitizen_count
        else:
            return "No Reply", no_reply_count

    def count_married(self, list_1):
        """
        Count the number of participants based on marital status.

        Args:
        - list_1: List of participant data.

        Returns:
        - Tuple containing marital status and count.
        """
        married_count = 0
        widowed_count = 0
        single_count = 0
        no_reply_count = 0
        for i in range(len(list_1)):
            if list_1[i][2] == "Married":
                married_count += 1
            elif list_1[i][2] == "Widow/Widower":
                widowed_count += 1
            elif list_1[i][2] == "Single/Unmarried":
                single_count += 1

            else:
                no_reply_count += 1
        if married_count == max(married_count, widowed_count, single_count, no_reply_count):
            return "Married", married_count
        elif widowed_count == max(married_count, widowed_count, single_count, no_reply_count):
            return "Widow/Widower", widowed_count
        elif single_count == max(married_count, widowed_count, single_count, no_reply_count):
            return "Single/Unmarried", single_count
        else:
            return "No Reply", no_reply_count

    def count_employed(self, list_1):
        """
        Count the number of participants based on employment status.

        Args:
        - list_1: List of participant data.

        Returns:
        - Tuple containing employment status and count.
        """
        employed_count = 0
        unemployed_count = 0
        no_reply_count = 0
        for i in range(len(list_1)):
            if list_1[i][3] == "Employed":
                employed_count += 1
            elif list_1[i][3] == "Unemployed":
                unemployed_count += 1
            else:
                no_reply_count += 1
        if employed_count == max(employed_count, unemployed_count, no_reply_count):
            return "Employed", employed_count
        elif unemployed_count == max(employed_count, unemployed_count, no_reply_count):
            return "Unemployed", unemployed_count
        else:
            return "No Reply", no_reply_count

    def count_party(self, list_1):
        """
        Count the number of participants based on political party affiliation.

        Args:
        - list_1: List of participant data.

        Returns:
        - Tuple containing party affiliation and count.
        """
        pro_count = 0
        anti_count = 0
        other_count = 0
        no_reply_count = 0
        for i in range(len(list_1)):
            if list_1[i][4] == "Pro-Pasta":
                pro_count += 1
            elif list_1[i][4] == "Anti-Pasta":
                anti_count += 1
            elif list_1[i][4] == "Other":
                other_count += 1

            else:
                no_reply_count += 1
        if pro_count == max(pro_count, anti_count, other_count, no_reply_count):
            return "Pro-Pasta", pro_count
        elif anti_count == max(pro_count, anti_count, other_count, no_reply_count):
            return "Anti-Pasta", anti_count
        elif other_count == max(pro_count, anti_count, other_count, no_reply_count):
            return "Other", other_count
        else:
            return "No Reply", no_reply_count
